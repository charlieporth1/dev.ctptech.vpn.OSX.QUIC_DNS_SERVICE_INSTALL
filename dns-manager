#!/bin/bash
export SHELL=/bin/bash
export HOME=/var/root
echo $SHELL
DOMAIN='dev.ctptech.vpn'

SERVICE="$DOMAIN.mDNSResponder.startup"
SERVICE_FILE="$SERVICE.plist"
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source $HOME/.gvm/scripts/gvm
GVM_RC="[[ -s "$HOME/.gvm/scripts/gvm" ]] && source $HOME/.gvm/scripts/gvm"
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

function check_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root"
    exit 1
  fi
}
check_root
function LOAD_GO() {
	export GOPATH=$HOME/go
	export PATH=$PATH:$GOPATH/bin
	[[ -s "$HOME/.gvm/scripts/gvm" ]] && source $HOME/.gvm/scripts/gvm
	echo "GVM_ROOT $GVM_ROOT"
	ls $HOME/.gvm/scripts/gvm
}
function INSTALL() {
   gem install terminal-notifier
}
function INSTALL_GO() {
	[[ -z `which gvm` ]] && bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
	gvm install go1.15.6
        local rc="rc"
        local SHELL_FILE=/etc/$SHELL$rc
        [[ -z `grep -o "$GVM_RC" /etc/profile` ]] && echo "$GVM_RC" >> /etc/profile
        case $SHELL in
                "bash" )
                   [[ -z `grep -o "$GVM_RC" $SHELL_FILE` ]] && echo "$GVM_RC" >> $SHELL_FILE
                   ;;
                "sh" )
                   [[ -z `grep -o "$GVM_RC" /etc/profile` ]] && echo "$GVM_RC" >> /etc/profile
                   ;;
                "zsh" )
                   [[ -z `grep -o "$GVM_RC" $SHELL_FILE` ]] && echo "$GVM_RC" >> $SHELL_FILE
                   ;;
                "*" )
                   [[ -z `grep -o "$GVM_RC" $SHELL_FILE` ]] && echo "$GVM_RC" >> $SHELL_FILE
                   ;;
        esac
        mkdir -p $HOME/go/{bin,src}
	LOAD_GO
}
function PRE_START_DNS() {
	sudo sysctl -w kern.maxfilesperproc=1048576
	sudo sysctl -w kern.maxfiles=1048600
	sudo ulimit -S -n 1048576
	sysctl kern.maxfilesperproc
	sysctl kern.maxfiles
	ulimit -S -n
	(ifconfig lo0 alias 192.168.123.9/32 up)&
        ifconfig lo0 alias 192.168.123.8/32 up
}
function PRE_STOP_DNS() {
	(ifconfig lo0 alias 192.168.123.9/32 down)&
        ifconfig lo0 alias 192.168.123.8/32 down
}
function KILL_DNS() {
        ps -ax | grep dnsproxy | grep -v 'grep' | awk '{print $1}' | xargs sudo kill -9
        ps -ax | grep dns-server | grep -v 'grep' | awk '{print $1}' | xargs sudo kill -9
}
function STOP_DNS() {
        echo "Stopping dns $SERVICE"
        sudo launchctl stop $SERVICE
        sudo launchctl unload /Library/LaunchDaemons/$SERVICE_FILE
	KILL_DNS
}
function START_DNS(){
        echo "Starting dns $SERVICE"
	sudo launchctl kill -9 system/com.apple.mDNSResponderHelper.reloaded
	sudo launchctl stop com.apple.mDNSResponderHelper.reloaded
	sudo launchctl kill -9 system/com.apple.mDNSResponder.reloaded
	sudo launchctl stop com.apple.mDNSResponder.reloaded
	sleep 3
        sudo launchctl load -w /Library/LaunchDaemons/$SERVICE_FILE
        sudo launchctl start $SERVICE
	sudo launchctl start com.apple.mDNSResponderHelper.reloaded
	sudo launchctl start com.apple.mDNSResponder.reloaded
	dig www.google.com @192.168.123.9
	dig www.google.com @192.168.123.8
}
function RESTART_DNS() {
        echo "Restating dns $SERVICE"
#	sudo launchctl kickstart -k $SERVICE
	STOP_DNS
	START_DNS
	STOP_DNS
	START_DNS
	START_DNS
	START_DNS
}
function START_WITH_BOOT_DNS() {
        sudo launchctl load -w /Library/LaunchDaemons/$SERVICE_FILE

}
function STOP_WITH_BOOT_DNS() {
        sudo launchctl unload -w /Library/LaunchDaemons/$SERVICE_FILE
}
function RETRY_RESTART() {
   local isFailed=`dig www.google.com @192.168.123.9 | grep -io "connection timed out; no servers could be reached"`
   local count=0
   while [[ -n "$isFailed" ]]; do
        local isFailed=`dig www.google.com @192.168.123.9 | grep -io "connection timed out; no servers could be reached"`
	RESTART_DNS
	sleep 9
        if [[ $count -ge 6 ]]; then
		echo "Exceded retry limit count: $count"
		echo "Exceded retry limit count: $count"
		terminal-notifier -title CTP-DNS Service -subtitle "Uh-oh!" -message "DNS Service failed to start please add 8.8.8.8 or 1.1.1.1 to your dns and contact support and notify us of this error so we can fix it asap"
		# -appIcon
		break;
	fi
        count=$((count += 1))
   done
}
function LIST_DNS() {
	sudo launchctl list | grep -i dns
}
function INSTALL_DNS_BINARY() {
	go get -u -v github.com/AdguardTeam/dnsproxy
}
function UPDATE_DNS_BINARY() {
	INSTALL_DNS_BINARY
#	RESTART_DNS
}
export -f STOP_DNS
export -f START_DNS

export -f PRE_STOP_DNS
export -f PRE_START_DNS

export -f RETRY_RESTART
export -f RESTART_DNS

export -f LIST_DNS

export -f INSTALL_GO
export -f LOAD_GO

export -f UPDATE_DNS_BINARY
export -f INSTALL_DNS_BINARY

export -f check_root
export -f KILL_DNS

export -f STOP_WITH_BOOT_DNS
export -f START_WITH_BOOT_DNS
